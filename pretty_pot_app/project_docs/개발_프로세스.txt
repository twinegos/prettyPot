PRETTY_POT_APP 개발 프로세스

=== 최신 개발 방식 적용 단계적 앱 개발 프로세스 ===

### Phase 1: 현대적 개발 환경 구축 (2-3일)

1.1 기본 도구 설정
- VSCode + Flutter/Dart 확장팩
- Claude Code 워크플로우: .claude 폴더 설정, 컨텍스트 관리
- Git 설정: Conventional Commits 도입
- GitHub 저장소: 프로젝트 버전 관리

1.2 AI 도구 통합
- GitHub Copilot 설치 및 설정
- Claude Code AI 페어 프로그래밍 워크플로우 확립
- 자동 코드 생성 패턴 학습

### Phase 2: Flutter 기초 + AI 협업 학습 (1주)

2.1 AI 협업 Flutter 학습
- Claude Code와 함께 기본 위젯 학습
- Copilot 자동완성으로 코드 작성 속도 향상
- 실시간 코드 리뷰: Claude Code로 즉석 피드백

2.2 현대적 프로젝트 구조
- Clean Architecture 기초 적용
- Feature-first 폴더 구조
- Dependency Injection 기본 패턴

### Phase 3: 현대적 상태관리 MVP (1-2주)

3.1 최신 상태관리 도입
- Riverpod 학습 및 적용
- Freezed로 데이터 클래스 자동 생성
- Build Runner로 코드 자동 생성

3.2 AI 기반 개발
- 자동 테스트 코드 생성: Claude Code로 단위 테스트 작성
- 문서 자동화: 주석 및 README 자동 생성
- 코드 품질 자동 검사: pre-commit hooks

### Phase 4: CI/CD 및 고급 기능 (2주)

4.1 자동화 파이프라인
- GitHub Actions: 자동 빌드/테스트
- 자동 배포: Firebase App Distribution
- 코드 품질 자동 검사: dartanalyzer, flutter test

4.2 백엔드 통합 + 모니터링
- Repository Pattern으로 데이터 계층 분리
- Firebase/MongoDB 연동
- Dart DevTools로 성능 모니터링

=== 일일 AI 협업 워크플로우 ===

모든 단계 공통:
1. 아침: Claude Code와 오늘의 개발 목표 설정
2. 개발 중: 
   - Copilot 자동완성 + Claude Code 실시간 리뷰
   - AI 페어 프로그래밍으로 복잡한 로직 해결
3. 저녁: 
   - 자동 테스트 생성
   - 문서 자동화
   - 진행상황 자동 추적

=== 단계별 AI 도구 도입 계획 ===

Phase 1: Claude Code + Git
Phase 2: + GitHub Copilot  
Phase 3: + 코드 자동 생성 도구
Phase 4: + CI/CD 자동화

각 단계마다 새로운 도구를 하나씩 추가하여 학습 부담을 줄이면서 최신 개발 경험을 쌓을 수 있습니다.

=== 개발 환경 고려사항 ===

개인 개발자 환경:
- 맥미니 M2 8GB RAM
- Flutter/Dart 학습 중
- Python/PySide2 초급-중급 수준
- Claude Code 활용 최적화

메모리 제약 대응:
- Android Studio 대신 VSCode 사용
- 에뮬레이터 대신 실제 디바이스 테스트
- 가벼운 개발 환경 유지

=== 권장 VSCode 확장팩 ===

기본 확장팩:
- Flutter/Dart 공식 확장팩
- Flutter Tree (위젯 트리 시각화)
- Awesome Flutter Snippets
- Bracket Pair Colorizer
- Error Lens (실시간 에러 표시)

최신 도구:
- GitHub Copilot
- Thunder Client (API 테스트)
- Flutter Intl (다국어 자동화)
- Dart Data Class Generator